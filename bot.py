import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import (InlineKeyboardMarkup, 
                          InlineKeyboardButton, 
                          ReplyKeyboardRemove)
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=os.getenv('8044256507:AAH4TbMzkk-hx5UXUGwAuneTImikoDpFrbs'))
dp = Dispatcher(bot, storage=storage)

# –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_DATA = {
    "card": {
        "text": """
üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>
–¢–∏–Ω—å–∫–æ—Ñ—Ñ: <code>2200 7017 8221 7225</code>

üìå <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>
<code>G{user_id}</code>""",
        "confirmation": "—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞"
    },
    "crypto": {
        "text": """
‚Çø <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ (USDT-TRC20):</b>
<code>TAbcde12345...</code>

üìå <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>
<code>G{user_id}</code>""",
        "confirmation": "—Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TxID)"
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üíµ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="init_payment"))
    
    await message.answer(
        "üè∞ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–µ—Ä–≤—É—é –º–∏—Ä–µ –í–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω—É!</b>\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤–∑–Ω–æ—Å 500‚ÇΩ.",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text="init_payment")
async def select_payment(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞", callback_data="method_card"),
        InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–∞", callback_data="method_crypto"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    
    await call.message.edit_text(
        "üîπ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('method_'))
async def send_payment_details(call: types.CallbackQuery):
    method = call.data.split('_')[1]  # card –∏–ª–∏ crypto
    user_id = call.from_user.id
    
    text = PAYMENT_DATA[method]["text"].format(user_id=user_id)
    confirm_type = PAYMENT_DATA[method]["confirmation"]
    
    await call.message.edit_text(
        f"{text}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ {confirm_type} —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤/—Ö–µ—à–µ–π
@dp.message_handler(content_types=['photo', 'text'])
async def handle_confirmation(message: types.Message):
    admin_id = int(os.getenv('7377016932'))
    
    if message.photo:
        # –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        await bot.send_photo(
            admin_id,
            message.photo[-1].file_id,
            caption=f"üÜï –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç @{message.from_user.username}\nID: {message.from_user.id}"
        )
        await message.reply(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω! –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    elif message.text and (message.text.startswith('0x') or len(message.text) == 64):
        # –î–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π
        await bot.send_message(
            admin_id,
            f"üÜî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n"
            f"–û—Ç: @{message.from_user.username}\n"
            f"ID: {message.from_user.id}\n"
            f"–•–µ—à: <code>{message.text}</code>",
            parse_mode='HTML'
        )
        await message.reply(
            "‚úÖ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏–Ω—è—Ç! –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardRemove()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
